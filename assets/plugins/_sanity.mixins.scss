// Sanity.CSS Mixins
// Version: 1.0.7 (30/07/2019)
// https://checksanity.ru
@mixin box-sizing($size) {
  box-sizing:         $size;
  -webkit-box-sizing: $size;
  -moz-box-sizing:    $size;
}
@mixin scrollbar-width($width: 0) {
  &::-webkit-scrollbar {
    width: $width;
  }
}
@mixin user-select($val: none) {
  user-select:           $val;
  -webkit-touch-callout: $val;
  -webkit-user-select:   $val;
  -khtml-user-select:    $val;
  -moz-user-select:      $val;
  -ms-user-select:       $val;
}
@mixin antialias {
  font-smoothing:          antialiased;
  -webkit-font-smoothing:  antialiased;
  -moz-osx-font-smoothing: grayscale;
}
@mixin appearance($val: none) {
  -webkit-appearance: $val;
  -moz-appearance:    $val;
  appearance:         $val;
}
@mixin column($count, $gap) {
  -webkit-column-count: $count;
  -webkit-column-gap:   $gap;
  -moz-column-count:    $count;
  -moz-column-gap:      $gap;
  -o-column-count:      $count;
  -o-column-gap:        $gap;
  column-count:         $count;
  column-gap:           $gap;
}
@mixin transition($anim...) {
  -webkit-transition: $anim;
  -moz-transition:    $anim;
  -o-transition:      $anim;
  transition:         $anim;
}
@mixin background-gradient($args...) {
  background-image: -o-linear-gradient($args);
  background-image: -moz-linear-gradient($args);
  background-image: -webkit-linear-gradient($args);
  background-image: linear-gradient($args);
}
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content:  $content;
  display:  $display;
  position: $pos;
}
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}
@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }
  @include optional-at-root(':-moz-placeholder') {
    @content;
  }
  @include optional-at-root('::-moz-placeholder') {
    @content;
  }
  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}
@mixin user-select-color($background, $color) {
  ::selection {
    background: $background;
    color:      $color;
  }
  ::-moz-selection {
    background: $background;
    color:      $color;
  }
}
@mixin transform($transform...) {
  -webkit-transform: $transform;
  -moz-transform:    $transform;
  transform:         $transform;
}
@mixin transform-style($style) {
  -webkit-transform-style: $style;
  -moz-transform-style:    $style;
  transform-style:         $style;
}
@mixin backface-visibility($visibility) {
  -webkit-backface-visibility: $visibility;
  -moz-backface-visibility:    $visibility;
  backface-visibility:         $visibility;
}
@mixin inline-flex($important: false) {
  @if $important {
    display: -webkit-inline-flex !important;
    display: -ms-inline-flexbox !important;
    display: inline-flex !important;
  } @else {
    display: -webkit-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
  }
}
@mixin flex($important: false) {
  @if $important {
    display: flex !important;
    display: -ms-flexbox !important;
    display: -webkit-flex !important;
  } @else {
    display: flex;
    display: -ms-flexbox;
    display: -webkit-flex;
  }
}
@mixin flex-column($important: false) {
  @include flex($important);
  @if $important {
    -ms-flex-direction:     column !important;
    -webkit-flex-direction: column !important;
    flex-direction:         column !important;
  } @else {
    -ms-flex-direction:     column;
    -webkit-flex-direction: column;
    flex-direction:         column;
  }
}
@mixin flex-column-reversed($important: false) {
  @include flex($important);
  @if $important {
    -ms-flex-direction:     column-reverse !important;
    -webkit-flex-direction: column-reverse !important;
    flex-direction:         column-reverse !important;
  } @else {
    -ms-flex-direction:     column-reverse;
    -webkit-flex-direction: column-reverse;
    flex-direction:         column-reverse;
  }
}
@mixin flex-row($important: false) {
  @include flex($important);
  @if $important {
    -ms-flex-direction:     row !important;
    -webkit-flex-direction: row !important;
    flex-direction:         row !important;
  } @else {
    -ms-flex-direction:     row;
    -webkit-flex-direction: row;
    flex-direction:         row;
  }
}
@mixin flex-row-reversed($important: false) {
  @include flex($important);
  @if $important {
    -ms-flex-direction:     row-reverse !important;
    -webkit-flex-direction: row-reverse !important;
    flex-direction:         row-reverse !important;
  } @else {
    -ms-flex-direction:     row-reverse;
    -webkit-flex-direction: row-reverse;
    flex-direction:         row-reverse;
  }
}
@mixin flex-wrap($wrap: wrap) {
  flex-wrap:         $wrap;
  -ms-flex-wrap:     $wrap;
  -webkit-flex-wrap: $wrap;
}
@mixin text-truncate($truncation-boundary) {
  max-width:     $truncation-boundary;
  white-space:   nowrap;
  overflow:      hidden;
  text-overflow: ellipsis;
}
@mixin font-inherit {
  font-size:      inherit;
  line-height:    inherit;
  font-weight:    inherit;
  font-family:    inherit;
  color:          inherit;
  letter-spacing: inherit;
  font-style:     inherit;
}
@mixin css-triangle($color, $direction, $size: 6px, $position: absolute, $round: false) {
  @include pseudo($pos: $position);
  width:  0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left:   $size solid transparent;
    border-right:  $size solid transparent;
    border-top:    $size solid $color;
    margin-top:    0 - round( $size / 2.5 );
  } @else if $direction == up {
    border-left:   $size solid transparent;
    border-right:  $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round( $size / 2.5 );
  } @else if $direction == right {
    border-top:    $size solid transparent;
    border-bottom: $size solid transparent;
    border-left:   $size solid $color;
    margin-right:  -$size;
  } @else if $direction == left {
    border-top:    $size solid transparent;
    border-bottom: $size solid transparent;
    border-right:  $size solid $color;
    margin-left:   -$size;
  }
}
$breakpoints: (
                  "phone": 400px,
                  "phone-wide": 480px,
                  "phablet": 560px,
                  "tablet-small": 640px,
                  "tablet": 768px,
                  "tablet-wide": 1024px,
                  "desktop": 1248px,
                  "desktop-wide": 1440px
              );
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);
    @if $type == max {
      $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}
@mixin resets($font, $color) {
  html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
    margin:         0;
    padding:        0;
    border:         0;
    vertical-align: baseline;
    font-family:    $font;
    color:          $color;
  }
  article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section {
    display: block;
  }
  blockquote, q {
    quotes:  none;
    display: block;
    &:before, &:after {
      content: unset;
    }
  }
  table {
    border-collapse: collapse;
    border-spacing:  0;
  }
  *, *::before, *::after {
    @include box-sizing(border-box);
    outline: unset;
  }
}